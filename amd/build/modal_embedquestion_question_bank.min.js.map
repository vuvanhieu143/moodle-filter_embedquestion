{"version":3,"file":"modal_embedquestion_question_bank.min.js","sources":["../src/modal_embedquestion_question_bank.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Contain the logic for the question bank modal.\n *\n * @module     filter_embedquestion/modal_embedquestion_question_bank\n * @copyright  2025  The Open University\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport Modal from 'mod_quiz/add_question_modal';\nimport * as Fragment from 'core/fragment';\nimport {getString} from 'core/str';\nimport AutoComplete from 'core/form-autocomplete';\n\nconst SELECTORS = {\n    SWITCH_TO_OTHER_BANK: 'button[data-action=\"switch-question-bank\"]',\n    BANK_SEARCH: '#searchbanks',\n    NEW_BANKMOD_ID: 'data-newmodid',\n    ANCHOR: 'a[href]',\n    SORTERS: '.sorters',\n    GO_BACK_BUTTON: 'button[data-action=\"go-back\"]',\n};\n\n/**\n * Class representing a modal for selecting a question bank to embed questions from.\n */\nexport class ModalEmbedQuestionQuestionBank extends Modal {\n    static TYPE = 'filter_embedquestion-question-bank';\n\n    configure(modalConfig) {\n        // Add question modals are always large.\n        modalConfig.large = true;\n\n        // Always show on creation.\n        modalConfig.show = true;\n        modalConfig.removeOnClose = true;\n\n        // Apply question modal configuration.\n        this.setContextId(modalConfig.contextId);\n        this.setAddOnPageId(modalConfig.addOnPage);\n        this.courseId = modalConfig.courseId;\n        this.bankCmId = modalConfig.bankCmId;\n        // Store the original title of the modal, so we can revert back to it once we have switched to another bank.\n        this.originalTitle = modalConfig.title;\n        this.currentEditor = modalConfig.editor;\n        // Apply standard configuration.\n        super.configure(modalConfig);\n    }\n\n    /**\n     * Show the modal and load the content for switching question banks.\n     *\n     * @method show\n     */\n    show() {\n        this.handleSwitchBankContentReload(SELECTORS.BANK_SEARCH);\n        return super.show(this);\n    }\n\n    /**\n     * Switch to the embed question modal for a specific question bank.\n     * This will destroy the current modal and dispatch an event to switch to the new modal.\n     *\n     * @param {String} bankCmid - The course module ID of the question bank to switch to.\n     * @method switchToEmbedQuestionModal\n     */\n    switchToEmbedQuestionModal(bankCmid) {\n        this.destroy();\n        const event = new CustomEvent('tiny_embedquestion::displayDialog', {\n            detail: {bankCmid: bankCmid, editor: this.currentEditor},\n        });\n        document.dispatchEvent(event);\n    }\n\n    /**\n     * Set up all the event handling for the modal.\n     *\n     * @method registerEventListeners\n     */\n    registerEventListeners() {\n        // Apply parent event listeners.\n        super.registerEventListeners(this);\n\n        this.getModal().on('click', SELECTORS.ANCHOR, (e) => {\n            const anchorElement = e.currentTarget;\n            e.preventDefault();\n            this.switchToEmbedQuestionModal(anchorElement.getAttribute(SELECTORS.NEW_BANKMOD_ID));\n        });\n\n        this.getModal().on('click', SELECTORS.GO_BACK_BUTTON, (e) => {\n            e.preventDefault();\n            this.switchToEmbedQuestionModal(e.currentTarget.value);\n        });\n    }\n\n    /**\n     * Update the modal with a list of banks to switch to and enhance the standard selects to Autocomplete fields.\n     *\n     * @param {String} Selector for the original select element.\n     * @return {Promise} Modal.\n     */\n    async handleSwitchBankContentReload(Selector) {\n        this.setTitle(getString('selectquestionbank', 'mod_quiz'));\n\n        // Create a 'Go back' button and set it in the footer.\n        const el = document.createElement('button');\n        el.classList.add('btn', 'btn-primary');\n        el.textContent = await getString('gobacktoquiz', 'mod_quiz');\n        el.setAttribute('data-action', 'go-back');\n        el.setAttribute('value', this.bankCmId);\n        this.setFooter(el);\n\n        this.setBody(\n            Fragment.loadFragment(\n                'filter_embedquestion',\n                'switch_question_bank',\n                this.getContextId(),\n                {\n                    'courseid': this.courseId,\n                })\n        );\n        const placeholder = await getString('searchbyname', 'mod_quiz');\n        await this.getBodyPromise();\n        await AutoComplete.enhance(\n            Selector,\n            false,\n            'core_question/question_banks_datasource',\n            placeholder,\n            false,\n            true,\n            '',\n            true\n        );\n\n        // Hide the selection element as we don't need it.\n        document.querySelector('.search-banks .form-autocomplete-selection')?.classList.add('d-none');\n        // Add a change listener to get the selected value.\n        const bankSearchEl = document.querySelector(Selector);\n        if (bankSearchEl) {\n            bankSearchEl.addEventListener('change', (e) => {\n                // This will be the chosen qbankCmid.\n                const selectedValue = e.target.value;\n                if (selectedValue > 0) {\n                    this.switchToEmbedQuestionModal(selectedValue);\n                }\n            });\n        }\n        return this;\n    }\n}\n\nexport default {\n    ModalEmbedQuestionQuestionBank,\n    SELECTORS\n};\nModalEmbedQuestionQuestionBank.registerModalType();"],"names":["SELECTORS","SWITCH_TO_OTHER_BANK","BANK_SEARCH","NEW_BANKMOD_ID","ANCHOR","SORTERS","GO_BACK_BUTTON","ModalEmbedQuestionQuestionBank","Modal","configure","modalConfig","large","show","removeOnClose","setContextId","contextId","setAddOnPageId","addOnPage","courseId","bankCmId","originalTitle","title","currentEditor","editor","handleSwitchBankContentReload","super","this","switchToEmbedQuestionModal","bankCmid","destroy","event","CustomEvent","detail","document","dispatchEvent","registerEventListeners","getModal","on","e","anchorElement","currentTarget","preventDefault","getAttribute","value","Selector","setTitle","el","createElement","classList","add","textContent","setAttribute","setFooter","setBody","Fragment","loadFragment","getContextId","placeholder","getBodyPromise","AutoComplete","enhance","querySelector","bankSearchEl","addEventListener","selectedValue","target","registerModalType"],"mappings":"q+CA2BMA,UAAY,CACdC,qBAAsB,6CACtBC,YAAa,eACbC,eAAgB,gBAChBC,OAAQ,UACRC,QAAS,WACTC,eAAgB,uCAMPC,uCAAuCC,4BAGhDC,UAAUC,aAENA,YAAYC,OAAQ,EAGpBD,YAAYE,MAAO,EACnBF,YAAYG,eAAgB,OAGvBC,aAAaJ,YAAYK,gBACzBC,eAAeN,YAAYO,gBAC3BC,SAAWR,YAAYQ,cACvBC,SAAWT,YAAYS,cAEvBC,cAAgBV,YAAYW,WAC5BC,cAAgBZ,YAAYa,aAE3Bd,UAAUC,aAQpBE,mBACSY,8BAA8BxB,UAAUE,aACtCuB,MAAMb,KAAKc,MAUtBC,2BAA2BC,eAClBC,gBACCC,MAAQ,IAAIC,YAAY,oCAAqC,CAC/DC,OAAQ,CAACJ,SAAUA,SAAUL,OAAQG,KAAKJ,iBAE9CW,SAASC,cAAcJ,OAQ3BK,+BAEUA,uBAAuBT,WAExBU,WAAWC,GAAG,QAASrC,UAAUI,QAASkC,UACrCC,cAAgBD,EAAEE,cACxBF,EAAEG,sBACGd,2BAA2BY,cAAcG,aAAa1C,UAAUG,yBAGpEiC,WAAWC,GAAG,QAASrC,UAAUM,gBAAiBgC,IACnDA,EAAEG,sBACGd,2BAA2BW,EAAEE,cAAcG,8CAUpBC,yCAC3BC,UAAS,kBAAU,qBAAsB,mBAGxCC,GAAKb,SAASc,cAAc,UAClCD,GAAGE,UAAUC,IAAI,MAAO,eACxBH,GAAGI,kBAAoB,kBAAU,eAAgB,YACjDJ,GAAGK,aAAa,cAAe,WAC/BL,GAAGK,aAAa,QAASzB,KAAKP,eACzBiC,UAAUN,SAEVO,QACDC,SAASC,aACL,uBACA,uBACA7B,KAAK8B,eACL,UACgB9B,KAAKR,kBAGvBuC,kBAAoB,kBAAU,eAAgB,kBAC9C/B,KAAKgC,uBACLC,0BAAaC,QACfhB,UACA,EACA,0CACAa,aACA,GACA,EACA,IACA,iCAIJxB,SAAS4B,cAAc,sGAA+Cb,UAAUC,IAAI,gBAE9Ea,aAAe7B,SAAS4B,cAAcjB,iBACxCkB,cACAA,aAAaC,iBAAiB,UAAWzB,UAE/B0B,cAAgB1B,EAAE2B,OAAOtB,MAC3BqB,cAAgB,QACXrC,2BAA2BqC,kBAIrCtC,qGAxHG,wDADLnB,mJA6HE,CACXA,+BAAAA,+BACAP,UAAAA,4CAEJO,+BAA+B2D"}